import logging

from rest_framework.views import exception_handler
from rest_framework.exceptions import APIException

logger = logging.getLogger(__name__)

def core_exception_handler(exc, context):
    # If an exception is thrown that we don't explicitly handle here, we want
    # to delegate to the default exception handler offered by DRF. If we do
    # handle this exception type, we will still want access to the response
    # generated by DRF, so we get that response up front.
    response = exception_handler(exc, context)
    handlers = {
        'ValidationError': _handle_generic_error,
        'AuthenticationFailed': _handle_authentication_failed,
    }
    # This is how we identify the type of the current exception. We will use
    # this in a moment to see whether we should handle this exception or let
    # Django REST Framework do its thing.
    exception_class = exc.__class__.__name__

    if exception_class in handlers:
        # If this exception is one that we can handle, handle it. Otherwise,
        # return the response generated earlier by the default exception 
        # handler.
        return handlers[exception_class](exc, context, response)
    
    return response

def _handle_generic_error(exc, context, response):
    # This is the most straightforward exception handler we can create.
    # We take the response generated by DRF and wrap it in the `errors` key.
    response.data = {
        'errors': response.data
    }

    return response

def _handle_authentication_failed(exc, context, response):
    # This is a handler for the AuthenticationFailed exception
    response.data = {
        'error': 'Authentication failed',
        'detail': str(exc)
    }
    response.status_code = APIException.status_code
    
    logger.error("Authentication Failed: %s", exc.detail)
    return response




# def custom_exception_handler(exc, context):
#     if isinstance(exc, AuthenticationFailed):
#         return Response({"error": "Authentication failed", "detail": str(exc)}, status=status.HTTP_401_UNAUTHORIZED)
#     elif isinstance(exc, ValidationError):
#         return Response({"error": "Validation error", "detail": exc.detail}, status=status.HTTP_400_BAD_REQUEST)
#     elif isinstance(exc, Http404):
#         return Response({"error": "Not found", "detail": str(exc)}, status=status.HTTP_404_NOT_FOUND)
#     elif isinstance(exc, PermissionDenied):
#         return Response({"error": "Permission denied", "detail": str(exc)}, status=status.HTTP_403_FORBIDDEN)

#     return Response({"error": "Internal server error", "detail": str(exc)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
